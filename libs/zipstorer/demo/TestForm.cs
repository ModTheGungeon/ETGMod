using System;
using System.Collections.Generic; //  Required to content the central directory
using System.IO;
using System.IO.Compression;  // Required to use ZipStorer class
using System.Windows.Forms;

namespace ZipStorerTest
{
    /// <summary>
    /// Test Form to demonstrate the use of ZipStorer
    /// </summary>
    public partial class TestForm : Form
    {
        /// <summary>
        /// Public constructor
        /// </summary>
        public TestForm()
        {
            InitializeComponent();

            this.RadioCreate.Checked = true;
        }

        #region Store page
        // Choose button
        private void ButtonChoose1_Click(object sender, EventArgs e)
        {
            OpenFileDialog dlg = new OpenFileDialog();
            dlg.AddExtension = true;
            dlg.CheckFileExists = true;
            dlg.Multiselect = true;
            dlg.Title = "Select files to store";

            if (dlg.ShowDialog() == DialogResult.OK)
            {
                listBox1.Items.Clear();
                listBox1.Items.AddRange(dlg.FileNames);
            }
        }
        // Browse button
        private void ButtonBrowse1_Click(object sender, EventArgs e)
        {
            FileDialog dlg;

            if (this.RadioCreate.Checked)
            {
                dlg = new SaveFileDialog();
                ((SaveFileDialog)dlg).OverwritePrompt = true;
            }
            else  // Append checked
            {
                dlg = new OpenFileDialog();
                dlg.CheckFileExists = true;
            }

            dlg.AddExtension = true;
            dlg.Filter = "Zip file|*.zip";
            dlg.Title = "Select filename for storage file";

            if (dlg.ShowDialog() == DialogResult.OK)
            {
                TextStorage1.Text = dlg.FileName;
            }
        }
        // Operation radio buttons
        private void RadioCreate_CheckedChanged(object sender, EventArgs e)
        {
            this.TextStorage1.Text = "";
        }
        private void RadioAppend_CheckedChanged(object sender, EventArgs e)
        {
            this.TextStorage1.Text = "";
        }
        // Proceed button
        private void ButtonProceed1_Click(object sender, EventArgs e)
        {
            // Previous checkings
            if (this.listBox1.Items.Count <= 0)
            {
                MessageBox.Show("Source files not chosen.", "ZipStorer Demo", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            if (string.IsNullOrEmpty(TextStorage1.Text))
            {
                MessageBox.Show("Target filename not defined.", "ZipStorer Demo", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            try
            {
                ZipStorer zip;

                if (this.RadioCreate.Checked)
                    // Creates a new zip file
                    zip = ZipStorer.Create(TextStorage1.Text, "Generated by ZipStorer Demo application");
                else
                    // Opens existing zip file
                    zip = ZipStorer.Open(TextStorage1.Text, FileAccess.Write);

                zip.EncodeUTF8 = this.CheckUTF8.Checked;

                // Stores all the files into the zip file
                foreach (string path in listBox1.Items)
                {
                    zip.AddFile(this.checkCompress.Checked ? ZipStorer.Compression.Deflate : ZipStorer.Compression.Store, 
                        path, Path.GetFileName(path), "");
                }

                // Creates a memory stream with text
                if (this.RadioCreate.Checked)
                {
                    MemoryStream readme = new MemoryStream(
                        System.Text.Encoding.UTF8.GetBytes(string.Format("{0}\r\nThis file has been {1} using the ZipStorer class, by Jaime Olivares.",
                        DateTime.Now, this.RadioCreate.Checked ? "created" : "appended")));

                    // Stores a new file directly from the stream
                    zip.AddStream(ZipStorer.Compression.Store, "readme.txt", readme, DateTime.Now, "Please read");
                    readme.Close();
                }

                // Updates and closes the zip file
                zip.Close();

                MessageBox.Show("Target file processed with success.", "ZipStorer Demo", MessageBoxButtons.OK, MessageBoxIcon.Information);

                // Clear controls
                this.listBox1.Items.Clear();
                this.TextStorage1.Text = "";
            }
            catch (InvalidDataException)
            {
                MessageBox.Show("Error: Invalid or not supported Zip file.", "ZipStorer Demo", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch
            {
                MessageBox.Show("Error while processing target file.", "ZipStorer Demo", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        #endregion

        #region Extract page
        private void ButtonBrowse2_Click(object sender, EventArgs e)
        {
            OpenFileDialog dlg = new OpenFileDialog();
            dlg.AddExtension = true;
            dlg.CheckFileExists = true;
            dlg.Multiselect = false;
            dlg.Title = "Select storage file";

            if (dlg.ShowDialog() == DialogResult.OK)
            {
                TextStorage2.Text = dlg.FileName;
                if (string.IsNullOrEmpty(TextTargetFolder.Text))
                    TextTargetFolder.Text = Path.GetDirectoryName(TextStorage2.Text);
                listBox2.Items.Clear();
            }
        }
        private void ButtonBrowse2a_Click(object sender, EventArgs e)
        {
            FolderBrowserDialog dlg = new FolderBrowserDialog();
            dlg.Description = "Select target folder for extracted files:";
            dlg.ShowNewFolderButton = true;

            if (dlg.ShowDialog() == DialogResult.OK)
            {
                TextTargetFolder.Text = dlg.SelectedPath;
            }
        }
        private void ButtonProceed2_Click(object sender, EventArgs e)
        {
            // Previous checkings
            if (string.IsNullOrEmpty(TextStorage2.Text))
            {
                MessageBox.Show("Storage filename not defined.", "ZipStorer Demo", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            if (string.IsNullOrEmpty(TextTargetFolder.Text))
            {
                MessageBox.Show("Target folder not defined.", "ZipStorer Demo", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            try
            {
                // Opens existing zip file
                ZipStorer zip = ZipStorer.Open(TextStorage2.Text, FileAccess.Read);

                // Read all directory contents
                List<ZipStorer.ZipFileEntry> dir = zip.ReadCentralDir();
                this.listBox2.Items.Clear();

                // Extract all files in target directory
                string path;
                bool result;
                foreach (ZipStorer.ZipFileEntry entry in dir)
                {
                    path = Path.Combine(TextTargetFolder.Text, entry.FilenameInZip);
                    result = zip.ExtractFile(entry, path);
                    this.listBox2.Items.Add(path + (result ? "" : " (error)"));
                }
                zip.Close();

                MessageBox.Show("Source file processed with success.", "ZipStorer Demo", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (InvalidDataException)
            {
                MessageBox.Show("Error: Invalid or not supported Zip file.", "ZipStorer Demo", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch
            {
                MessageBox.Show("Error while processing source file.", "ZipStorer Demo", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        #endregion

        #region Remove page
        private void ButtonBrowse4_Click(object sender, EventArgs e)
        {
            OpenFileDialog dlg = new OpenFileDialog();
            dlg.AddExtension = true;
            dlg.CheckFileExists = true;
            dlg.Multiselect = false;
            dlg.Title = "Select storage file";

            if (dlg.ShowDialog() == DialogResult.OK)
            {
                TextStorage4.Text = dlg.FileName;

                // Opens existing zip file
                ZipStorer zip = ZipStorer.Open(TextStorage4.Text, FileAccess.Read);

                // Read all directory contents
                List<ZipStorer.ZipFileEntry> dir = zip.ReadCentralDir();
                listBox4.Tag = zip;  // keep the zipstorer alive

                listBox4.DataSource = dir;
            }
        }
        private void ButtonProceed4_Click(object sender, EventArgs e)
        {
            List<ZipStorer.ZipFileEntry> removeList = new List<ZipStorer.ZipFileEntry>();

            foreach (object sel in listBox4.SelectedItems)
            {
                removeList.Add((ZipStorer.ZipFileEntry)sel);
            }

            ZipStorer zip = listBox4.Tag as ZipStorer;
            try
            {
                if (zip == null || !ZipStorer.RemoveEntries(ref zip, removeList))
                {
                    throw new Exception();
                }
                else
                {
                    MessageBox.Show("Zip file entries removed with success", "ZipStorer Demo", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    listBox4.Tag = zip;
                    listBox4.DataSource = zip.ReadCentralDir();
                }
            }
            catch
            {
                MessageBox.Show("Error while trying to remove entries from Zip file", "ZipStorer Demo", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        #endregion

        #region Credits page
        private void linkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            System.Diagnostics.Process.Start("http://github.com/jaime-olivares/zipstorer");
        }
        private void pictureBox1_Click(object sender, EventArgs e)
        {
        }
        private void pictureBox2_Click(object sender, EventArgs e)
        {
        }
        #endregion
    }
}
